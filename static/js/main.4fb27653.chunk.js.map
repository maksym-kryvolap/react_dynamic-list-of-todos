{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","todoId","setTodoId","setUserId","className","map","todo","id","title","completed","classNames","type","onClick","userId","TodoFilter","selectedTodo","selectTodos","query","querySet","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","TodoModal","setTodo","useState","user","setUser","useEffect","users","a","filter","tod","href","email","name","App","setTodos","todosOriginal","setTodosOriginal","select","setSelect","loading","setLoading","setQuery","todoList","todoPromise","todoSelect","tittleCase","toLowerCase","queryCase","includes","selectList","queryText","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fb27653.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  todoId: number,\n  setTodoId: (id: number) => void,\n  setUserId: (id: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoId,\n  setTodoId,\n  setUserId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n\n      {todos.map((todo) => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': todoId === todo.id,\n            })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(completed\n                  ? 'has-text-success' : 'has-text-danger')}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setTodoId(todo.id);\n                  setUserId(todo.userId);\n                }}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far',\n                      todo.id !== todoId ? 'fa-eye' : 'fa-eye-slash')}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","type Props = {\n  selectedTodo: string,\n  selectTodos: (selectList: string) => void,\n  query: string\n  querySet: (queryText: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedTodo,\n  selectTodos,\n  query,\n  querySet,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectedTodo}\n          onChange={(event => {\n            selectTodos(event.target.value);\n          })}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => querySet(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => querySet('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  setUserId: (id: number) => void,\n  setTodo: (id: number) => void,\n  todoId: number,\n  todos: Todo[],\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  userId,\n  setUserId,\n  setTodo,\n  todoId,\n  todos,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const users = async () => {\n      setUser(await getUser(userId));\n    };\n\n    users();\n  }, []);\n\n  const todo = todos.filter((tod => tod.id === todoId))[0];\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setUserId(0);\n                setTodo(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosOriginal, setTodosOriginal] = useState<Todo[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [select, setSelect] = useState('all');\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [todoId, setTodoId] = useState(0);\n\n  useEffect(() => {\n    const todoList = async () => {\n      const todoPromise = await getTodos();\n\n      setTodosOriginal(todoPromise);\n      setTodos(todoPromise);\n      setLoading(true);\n    };\n\n    todoList();\n  }, []);\n\n  useEffect(() => {\n    const todoSelect: Todo[] = todosOriginal\n      .filter((todo: Todo) => {\n        const tittleCase = todo.title.toLowerCase();\n        const queryCase = query.toLowerCase();\n\n        switch (select) {\n          case 'active':\n            return (\n              !todo.completed && tittleCase.includes(queryCase)\n            );\n          case 'completed':\n            return (\n              todo.completed && tittleCase.includes(queryCase)\n            );\n          default:\n            return (tittleCase.includes(queryCase));\n        }\n      }) || [];\n\n    setTodos(todoSelect);\n  }, [select, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedTodo={select}\n                selectTodos={(selectList: string) => {\n                  setSelect(selectList);\n                }}\n                query={query}\n                querySet={(queryText: string) => {\n                  setQuery(queryText);\n                }}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={todos}\n                    todoId={todoId}\n                    setTodoId={(id: number) => setTodoId(id)}\n                    setUserId={(id: number) => setUserId(id)}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoId > 0 && (\n        <TodoModal\n          userId={userId}\n          setUserId={(id: number) => setUserId(id)}\n          setTodo={(id: number) => setTodoId(id)}\n          todoId={todoId}\n          todos={todos}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}